// import { relations, sql } from "drizzle-orm";
// import { sqliteTable, integer, text, SQLiteColumn, blob } from "drizzle-orm/sqlite-core"
// import { createSelectSchema, createSchemaFactory } from 'drizzle-zod';

// import { ZodEmail, ZodEnum, ZodString } from "zod/v4"; 

// const { createInsertSchema, createUpdateSchema } = createSchemaFactory({
// 	coerce: {
// 	  date: true,
// 	}
// });

// const defaults = {
// 	// https://orm.drizzle.team/docs/guides/timestamp-default-value#sqlite
// 	current_timestamp: text().default(sql`(current_timestamp)`),
// 	// https://orm.drizzle.team/docs/indexes-constraints#foreign-key
// 	related: (table_row: SQLiteColumn) => text().notNull().references(() => table_row, {onDelete: 'cascade'})
// }


// /*
// 	User
// */
// export const user = sqliteTable('user', {
// 	email: text().primaryKey(),
// 	given_name: text().notNull(),
// 	family_name: text().notNull(),
// 	name: text().notNull(),
// 	picture: text().notNull(),
// 	sub: text().notNull(),
// 	signed: defaults.current_timestamp
// });

// export const userInsertSchema = createInsertSchema(user, {
// 	// email: (schema) => (schema as ZodString).email()
// });

// /*
// 	Logs
// */

// export const log = sqliteTable('log', {
// 	id: text().primaryKey(),
// 	date: defaults.current_timestamp,
// 	route: text().notNull(),
// 	ip: text(),
// 	country: text(),
// 	user: text().references(() => user.email)
// });

// export const insertLogSchema = createInsertSchema(log, {
// 	id: (schema) =>  (schema as ZodString).optional(),
// 	country: (schema) => (schema as ZodString).max(2)
// })
// .transform((data) => {
// 	const id = `${data.ip}:${Date.now()}`;
// 	return { ...data, id};
// });

// /*
// 	chat
// */
// export const chat = sqliteTable('chat', {
// 	id: text('id').primaryKey(), // create hash on name and date
// 	name: text('name')
// 		.notNull(),
// 	public: text('public')
// 		.$type<"public" | "private">()
// 		.default("public"),
// 	description: text('description').default(''),
// 	created_at: defaults.current_timestamp,
// });

// // Insert schema generates unique ID
// export const chatInsertSchema = createInsertSchema(chat, {
// 	id: (schema) =>  (schema as ZodString).optional(), // generated by transform
// 	name: (schema) => (schema as ZodString).min(3).max(15),
// 	description: (schema) => (schema as ZodString).max(300),
// 	// public: z.enum(['public', 'private']).default('public'),
// })
// 	.transform((data) => {
// 		const id = `${data.name}:${Date.now()}`;
// 		return {...data, id }
// 	})

// /*
// 	members
// */
// export const ch_member = sqliteTable('ch_member', {
// 	id: text().primaryKey(), // create hash on user chat and date
// 	chat: defaults.related(chat.id),
// 	user: defaults.related(user.email),
// 	role: text()
// 		.$type<'invited' | 'blocked' | 'participant' | 'admin'>()
// 		.default('admin'),
// 	about: text().default(''),
// 	since: defaults.current_timestamp,
// });

// export const memberRel = relations(ch_member, ({one}) => ({
// 	user: one(user, {
// 		fields: [ch_member.user],
// 		references: [user.email]
// 	}),
// 	chat: one(chat, {
// 		fields: [ch_member.chat],
// 		references: [chat.id]
// 	})
// }));

// // Generates unique ID
// export const memberInsertSchema = createInsertSchema(ch_member, {
// 	id: (schema) => (schema as ZodString).optional(), // auto-generate
// 	chat: (schema) => (schema as ZodString).min(1),
// 	user: (schema) => (schema as ZodString).email(),
// 	// role: z.enum(['invited', 'blocked', 'participant', 'admin']).optional(), // validate and default
// 	about: (schema) => (schema as ZodString).max(300).optional(),
// })
// .transform((data) => {
// 	const id = `${data.user}:${data.chat}`;
// 	return { ...data, id };
// });

// export const memberUpdateSchema = createUpdateSchema(ch_member);


// /*
// 	Message
// */
// export const message = sqliteTable('message', {
// 	id: text().primaryKey(), // create hash on member chat time
// 	chat: defaults.related(chat.id),
// 	member: defaults.related(ch_member.id),
// 	content: text()
// 		.notNull(),
// 	sent: defaults.current_timestamp
// });

// export const messageRel = relations(message, ({one}) => ({
// 	user: one(ch_member, {
// 		fields: [message.member],
// 		references: [ch_member.id]
// 	}),
// 	chat: one(chat, {
// 		fields: [message.chat],
// 		references: [chat.id]
// 	})
// }));

// export const messageInsertSchema = createInsertSchema(message, {
// 	id: (schema) => (schema as ZodString).optional(), // will be generated
// 	chat: (schema) => (schema as ZodString).min(1),
// 	member: (schema) => (schema as ZodString).min(1),
// 	content: (schema) => (schema as ZodString).min(1).max(1000),})
// .transform((data) => {
// 	const id = `${data.member}:${data.chat}:${Date.now()}`;
// 	const sent = formatDate(new Date);
// 	return { ...data, id, sent};
// });

// function formatDate(date: Date) {
//   const isoString = date.toISOString();
//   return isoString
//     .replace('T', ' ')
//     .replace(/\.\d{3}Z$/, '');
// }



